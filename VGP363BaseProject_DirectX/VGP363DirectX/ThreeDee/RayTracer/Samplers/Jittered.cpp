// Jittered.cpp
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Jittered.h"

namespace ThreeD
{
	_JITTERED::_JITTERED()
		:_SAMPLER()
	{}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_JITTERED::_JITTERED(const int ns)
		:_SAMPLER(ns)
	{
		_GenerateSamples();
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_JITTERED::_JITTERED(const int ns, const int m)
		:_SAMPLER(ns, m)
	{
		_GenerateSamples();
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_JITTERED::_JITTERED(const _JITTERED &j)
		:_SAMPLER(j)
	{
		_GenerateSamples();
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_JITTERED& _JITTERED::operator= (const _JITTERED &j)
	{
		if(this == &j)
			return (*this);
		_SAMPLER::operator= (j);
	
		return (*this);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_JITTERED::~_JITTERED() {}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_JITTERED* _JITTERED::_Clone()
	{
		return (new _JITTERED(*this));
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	void _JITTERED::_GenerateSamples()
	{
		int n = (int) sqrt((float)num_samples);

		for (int p = 0; p < num_sets; p++)
		{
			for (int j = 0; j < n; j++)
			{
				for (int k = 0; k < n; k++)
				{
					_POINT2D sp((k + _RandFloat) / n, (j + _RandFloat) / n);
					samples.push_back(sp);
				}
			}
		}
	}
}