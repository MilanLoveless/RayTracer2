// Regular.cpp
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Regular.h"

namespace ThreeD
{
	_REGULAR::_REGULAR()
		:_SAMPLER()
	{}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_REGULAR::_REGULAR(const int ns)
		:_SAMPLER(ns)
	{
		_GenerateSamples();
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_REGULAR::_REGULAR(const _REGULAR &reg)
		:_SAMPLER(reg)
	{
		_GenerateSamples();
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_REGULAR& _REGULAR::operator= (const _REGULAR &reg)
	{
		if(this == &reg)
		{
			return (*this);
		}

		_SAMPLER::operator=(reg);

		return (*this);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_REGULAR::~_REGULAR() {}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	void _REGULAR::_GenerateSamples()
	{
		int n = (int) sqrt((float)num_samples);

		for (int j = 0; j < num_sets; j++)
		{
			for (int p = 0; p < n; p++)
			{
				for (int q = 0; q < n; q++)
				{
					samples.push_back(_POINT2D((q + 0.5) / n, (p + 0.5) / n));
				}
			}
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_REGULAR* _REGULAR::_Clone()
	{
		return (new _REGULAR(*this));
	}
}