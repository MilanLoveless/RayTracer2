// PureRandom.cpp
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "PureRandom.h"

namespace ThreeD
{
	_PURERANDOM::_PURERANDOM()
		:_SAMPLER()
	{}
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	_PURERANDOM::_PURERANDOM(const int ns)
		:_SAMPLER(ns)
	{
		_GenerateSamples();
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	_PURERANDOM::_PURERANDOM(const int ns, const int m)
		:_SAMPLER(ns, m)
	{
		_GenerateSamples();
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	_PURERANDOM::_PURERANDOM(const _PURERANDOM &r)
		:_SAMPLER(r)
	{
		_GenerateSamples();
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	_PURERANDOM& _PURERANDOM::operator= (const _PURERANDOM &r)
	{
		if(this == &r)
			return (*this);

		_SAMPLER::operator=(r);

		return (*this);
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	_PURERANDOM* _PURERANDOM::_Clone()
	{
		return (new _PURERANDOM(*this));
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	_PURERANDOM::~_PURERANDOM() {}
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	void _PURERANDOM::_GenerateSamples()
	{
		for(int p = 0; p < num_sets; p++)
		{
			for(int q = 0; q < num_samples; q++)
			{
				samples.push_back(_POINT2D(_RandFloat, _RandFloat));
			}
		}
	}
}