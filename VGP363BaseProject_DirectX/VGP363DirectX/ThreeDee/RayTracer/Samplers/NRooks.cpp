// NROOKS.cpp
////////////////////////////////////////////////////////////////////////////

// NRooks.cpp
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "NRooks.h"

namespace ThreeD
{
	_NROOKS::_NROOKS()
		: _SAMPLER()
	{

	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_NROOKS::_NROOKS(const int numsamples)
		: _SAMPLER(numsamples)
	{
		_GenerateSamples();
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_NROOKS::_NROOKS(const int numsamples, const int m)
		: _SAMPLER(numsamples, m)
	{
		_GenerateSamples();
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_NROOKS::_NROOKS(const _NROOKS &nr)
		: _SAMPLER(nr)
	{
		_GenerateSamples();
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_NROOKS& _NROOKS::operator= (const _NROOKS &rhs)
	{
		if(this == &rhs)
			return (*this);
		_SAMPLER::operator=(rhs);
		return (*this);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_NROOKS* _NROOKS::_Clone()
	{
		return (new _NROOKS(*this));
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_NROOKS::~_NROOKS()
	{

	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	void _NROOKS::_GenerateSamples()
	{	
		for (int p = 0; p < num_sets; p++)
		{
			for (int j = 0; j < num_samples; j++)
			{
				_POINT2D sp((j + _RandFloat) / num_samples, (j + _RandFloat) / num_samples);
				samples.push_back(sp);
			}		
		}
		_ShuffleXCoords();
		_ShuffleYCoords();
	}
}