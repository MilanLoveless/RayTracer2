// BRDF.cpp
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "BRDF.h"

namespace ThreeD
{
	_BRDF::_BRDF()
		:sampler_ptr(NULL)
	{}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_BRDF::_BRDF (const _BRDF& brdf) {
		if(brdf.sampler_ptr)
			sampler_ptr	= brdf.sampler_ptr->_Clone(); 
		else  sampler_ptr = NULL;
	}	
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_BRDF& _BRDF::operator= (const _BRDF& rhs) {
		if (this == &rhs)
			return (*this);
		
		if (sampler_ptr) {
			delete sampler_ptr;
			sampler_ptr = NULL;
		}

		if (rhs.sampler_ptr)
			sampler_ptr	= rhs.sampler_ptr->_Clone();

		return (*this);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_BRDF::~_BRDF()
	{
		if(sampler_ptr)
		{
			delete sampler_ptr;
			sampler_ptr = NULL;
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	void _BRDF::_SetSampler(_SAMPLER *s_ptr)
	{
		sampler_ptr = s_ptr;
		sampler_ptr->_MapToHemisphere(1);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_COLOR4F _BRDF::_F(const _SHADEREC &sr, const _VERTEX4F &wi, const _VERTEX4F &wo)
	{
		return _COLOR4F(0.0);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_COLOR4F _BRDF::_SampleF(const _SHADEREC &sr, const _VERTEX4F &wi, const _VERTEX4F &wo)
	{
		return _COLOR4F(0.0);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_COLOR4F _BRDF::_SampleF(const _SHADEREC &sr, const _VERTEX4F &wi, const _VERTEX4F &wo, float &pdf)
	{
		return _COLOR4F(0.0);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_COLOR4F _BRDF::_Rho(const _SHADEREC &sr, const _VERTEX4F &wo)
	{
		return _COLOR4F(0.0);
	}
}