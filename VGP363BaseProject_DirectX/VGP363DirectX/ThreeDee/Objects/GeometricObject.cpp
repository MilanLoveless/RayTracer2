// GeometricObject.cpp
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "GeometricObject.h"

#include "../RayTracer/Materials/Material.h"

namespace ThreeD
{
	_GEOMETRICOBJECT::_GEOMETRICOBJECT()
	{
		material_ptr = NULL;
		shadows = true;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_GEOMETRICOBJECT::~_GEOMETRICOBJECT() {}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_GEOMETRICOBJECT::_GEOMETRICOBJECT(const _GEOMETRICOBJECT &obj)
	{
		shadows = obj.shadows;
		if (obj.material_ptr)
			material_ptr = obj.material_ptr->_Clone();
		else
			material_ptr = NULL;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_GEOMETRICOBJECT& _GEOMETRICOBJECT::operator= (const _GEOMETRICOBJECT &obj)
	{
		if(this == &obj)
			return (*this);
		
		shadows = obj.shadows;
		if (obj.material_ptr)
			material_ptr = obj.material_ptr->_Clone();
		else
			material_ptr = NULL;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_VERTEX4F _GEOMETRICOBJECT::_GetNormal()
	{
		return (_VERTEX4F());
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_VERTEX4F _GEOMETRICOBJECT::_GetNormal(const _VERTEX4F &p)
	{
		return (_VERTEX4F());
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_MATERIAL* _GEOMETRICOBJECT::_GetMaterial()
	{
		return (material_ptr);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_VERTEX4F _GEOMETRICOBJECT::_Sample()
	{
		return(_VERTEX4F());
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////
	_DOUBLE _GEOMETRICOBJECT::_PDF(_SHADEREC &sr)
	{
		return (0.0);
	}
}